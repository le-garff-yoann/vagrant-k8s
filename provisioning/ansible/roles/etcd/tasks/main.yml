---
- name: Export of some variables as facts
  set_fact:
    etcd_group: "{{ etcd_group }}"
    etcd_cacertfile_path: "{{ etcd_cacertfile_path }}"
    etcd_certfile_path: "{{ etcd_certfile_path }}"
    etcd_keyfile_path: "{{ etcd_keyfile_path }}"

- name: Create the group
  group:
    name: "{{ etcd_group }}"
  notify: Restart etcd service

- name: Create the user
  user:
    name: "{{ etcd_user }}"
    groups: "{{ etcd_group }}"
    shell: /bin/false
    home: "{{ etcd_homedir }}"
  notify: Restart etcd service

- name: Create bases directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ etcd_user }}"
    group: "{{ etcd_group }}"
  with_items:
    - "{{ etcd_homedir }}"
    - "{{ etcd_certsdir }}"
    - "{{ etcd_datadir }}"

- name: Copy certs
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
    owner: "{{ etcd_user }}"
    group: "{{ etcd_group }}"
    mode: 0640
  notify: Restart etcd service
  with_items:
    - src: "{{ etcd_cacertfile_srcpath }}"
      dst: "{{ etcd_cacertfile_path }}"
    - src: "{{ etcd_certfile_srcpath }}"
      dst: "{{ etcd_certfile_path }}"
    - src: "{{ etcd_keyfile_srcpath }}"
      dst: "{{ etcd_keyfile_path }}"

- name: Stat {{ etcd_binary_path }}
  stat:
    path: "{{ etcd_binary_path }}"
  register: reg_sym

- name: Get {{ etcd_binary_path }}Â version
  command: "{{ etcd_binary_path | quote }} --version"
  register: reg
  changed_when: False
  when: reg_sym.stat.exists

- block:
    - name: Create a tempdir for downloading binaries
      tempfile:
        state: directory
      register: reg_tempdir
      changed_when: False

    - name: Unarchive {{ etcd_binary_download_url }} to {{ reg_tempdir.path }}
      unarchive:
        src: "{{ etcd_binary_download_url }}"
        dest: "{{ reg_tempdir.path }}"
        remote_src: yes
      changed_when: False

    - name: Copy binaries to /usr/local/bin
      copy:
        src: "{{ item }}"
        dest: /usr/local/bin/{{ item | basename }}
        remote_src: yes
        mode: 0755
      notify: Restart etcd service
      with_items:
        - "{{ reg_tempdir.path }}/etcd-v{{ etcd_version }}-linux-amd64/etcd"
        - "{{ reg_tempdir.path }}/etcd-v{{ etcd_version }}-linux-amd64/etcdctl"

    - name: Delete {{ reg_tempdir.path }}/etcd-v{{ etcd_version }}-linux-amd64
      file:
        path: "{{ reg_tempdir.path }}/etcd-v{{ etcd_version }}-linux-amd64"
        state: absent
  always:
    - name: Delete tempdir {{ reg_tempdir.path }}
      file:
        path: "{{ reg_tempdir.path }}"
        state: absent
      changed_when: False
  when: not reg_sym.stat.exists or reg.stdout is not search(etcd_version)

- name: Create systemd service unit
  template:
    src: etcd.service.j2
    dest: /lib/systemd/system/etcd.service
  notify: Restart etcd service

- meta: flush_handlers

- name: Start the service
  systemd:
    name: etcd
    daemon_reload: yes
    enabled: yes
    state: started
