---

- hosts: all

  handlers:
    - name: Restart etcd service
      systemd:
        name: etcd
        daemon_reload: yes
        state: restarted

  tasks:
    - name: Create etcd group
      group:
        name: etcd
        gid: 1501

    - name: Create etcd user
      user:
        name: etcd
        uid: 1501
        groups: etcd, vagrant
        shell: /bin/false
        create_home: yes
        home: /var/lib/etcd

    - stat:
        path: /usr/local/bin/etcd
      register: sym

    - shell: /usr/local/bin/etcd --version
      register: etcd_actual_version
      changed_when: False
      when: sym.stat.exists

    - name: Download and install etcd binaries
      block:
        - get_url:
            url: https://github.com/coreos/etcd/releases/download/v{{ config.k8s.etcd.version }}/etcd-v{{ config.k8s.etcd.version }}-linux-amd64.tar.gz
            dest: /tmp/etcd-v{{ config.k8s.etcd.version }}-linux-amd64.tar.gz
            validate_certs: no
          changed_when: False
        - unarchive:
            src: /tmp/etcd-v{{ config.k8s.etcd.version }}-linux-amd64.tar.gz
            dest: /tmp
          changed_when: False
        - copy:
            src: "{{ item }}"
            dest: /usr/local/bin/{{ item | basename }}
            mode: 0755
          notify: Restart etcd service
          with_fileglob:
            - /tmp/etcd-v{{ config.k8s.etcd.version }}-linux-amd64/etcd*
        - file:
            path: "{{ item }}"
            state: absent
          with_items:
            - /tmp/etcd-v{{ config.k8s.etcd.version }}-linux-amd64.tar.gz
            - /tmp/etcd-v{{ config.k8s.etcd.version }}-linux-amd64
      when: not sym.stat.exists or etcd_actual_version.stdout is not search(config.k8s.etcd.version)

    - name: Create etcd systemd service unit
      copy:
        dest: /lib/systemd/system/etcd.service
        content: |
          [Unit]
          Description=etcd key-value store
          Documentation=https://github.com/coreos/etcd

          [Service]
          User=etcd
          Restart=always
          RestartSec=10s
          LimitNOFILE=40000
          ExecStart=/usr/local/bin/etcd \
            --name {{ ansible_hostname }} \
            --data-dir /var/lib/etcd \
            --initial-advertise-peer-urls http://{{ ansible_hostname }}.{{ config.virtual.domain }}:2380 \
            --listen-peer-urls http://0.0.0.0:2380 \
            --listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
            --advertise-client-urls http://{{ ansible_hostname }}.{{ config.virtual.domain }}:2379,http://{{ ansible_hostname }}.{{ config.virtual.domain }}:4001 \
            --initial-cluster-token etcd-cluster-1 \
            --initial-cluster {% set c = [] %}{% for k, v in config.virtual.nodes | dictsort %}{% set d = c.append(k + '=http://' + k + '.' + config.virtual.domain + ':2380') %}{% endfor %}{{ c | join(',') }} \
            --initial-cluster-state new \
            --heartbeat-interval 1000 \
            --election-timeout 5000 \
            --client-cert-auth \
            --trusted-ca-file '{{ config.srvkube.guest }}/ca.pem' \
            --cert-file '{{ config.srvkube.guest }}/{{ ansible_hostname }}-etcd.crt' \
            --key-file '{{ config.srvkube.guest }}/{{ ansible_hostname }}-etcd.key' \
            --peer-client-cert-auth \
            --peer-trusted-ca-file '{{ config.srvkube.guest }}/ca.pem' \
            --peer-cert-file '{{ config.srvkube.guest }}/{{ ansible_hostname }}-etcd.crt' \
            --peer-key-file '{{ config.srvkube.guest }}/{{ ansible_hostname }}-etcd.key' \
            --enable-v2

          [Install]
          WantedBy=multi-user.target
      notify: Restart etcd service

    - name: Start etcd service
      systemd:
        name: etcd
        daemon_reload: yes
        enabled: yes
        state: started
