---

- hosts: all

  tasks:
    - name: Generate and apply CoreDNS k8s manifest
      block:
        - tempfile:
            state: file
          register: tempfile
          changed_when: false
        - copy:
            dest: "{{ tempfile.path }}"
            content: |
              ---
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: coredns
                namespace: kube-system

              ---
              apiVersion: rbac.authorization.k8s.io/v1beta1
              kind: ClusterRole
              metadata:
                labels:
                  kubernetes.io/bootstrapping: rbac-defaults
                name: system:coredns
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - endpoints
                    - services
                    - pods
                    - namespaces
                  verbs:
                    - list
                    - watch

              ---
              apiVersion: rbac.authorization.k8s.io/v1beta1
              kind: ClusterRoleBinding
              metadata:
                name: system:coredns
                annotations:
                  rbac.authorization.kubernetes.io/autoupdate: true
                labels:
                  kubernetes.io/bootstrapping: rbac-defaults
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: system:coredns
              subjects:
                - kind: ServiceAccount
                  name: coredns
                  namespace: kube-system

              ---
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: coredns
                namespace: kube-system
              data:
                Corefile: |
                  .:53 {
                      errors
                      log
                      health
                      kubernetes {{ config.k8s.domain }} {{ config.k8s.service.range }} {{ config.k8s.pod.network }} {
                        pods insecure
                        upstream /etc/resolv.conf
                      }
                      prometheus :9153
                      proxy . /etc/resolv.conf
                      cache 30
                  }

              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: coredns
                namespace: kube-system
                labels:
                  app: coredns
                  kubernetes.io/cluster-service: "true"
                  kubernetes.io/name: CoreDNS
                  prometheus.io/port: "9153"
                  prometheus.io/scrape: "true"
              spec:
                selector:
                  app: coredns
                clusterIP: {{ config.k8s.services.coredns.ip }}
                ports:
                  - name: dns
                    port: 53
                    protocol: UDP
                  - name: dns-tcp
                    port: 53
                    protocol: TCP
                  - name: metrics
                    port: 9153
                    protocol: TCP

              ---
              apiVersion: extensions/v1beta1
              kind: Deployment
              metadata:
                name: coredns
                namespace: kube-system
                labels:
                  app: coredns
                  kubernetes.io/cluster-service: "true"
                  kubernetes.io/name: CoreDNS
              spec:
                replicas: 2
                selector:
                  matchLabels:
                    app: coredns
                template:
                  metadata:
                    labels:
                      app: coredns
                  spec:
                    serviceAccountName: coredns
                    tolerations:
                      - key: node-role.kubernetes.io/master
                        effect: NoSchedule
                      - key: CriticalAddonsOnly
                        operator: Exists
                    affinity:
                      podAntiAffinity:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          - weight: 100
                            podAffinityTerm:
                              labelSelector:
                                matchExpressions:
                                  - key: app
                                    operator: In
                                    values:
                                      - coredns
                              topologyKey: kubernetes.io/hostname
                    containers:
                      - name: coredns
                        image: coredns/coredns:{{ config.k8s.services.coredns.version }}
                        args:
                          - -conf
                          - /etc/coredns/Corefile
                        volumeMounts:
                          - name: config-volume
                            mountPath: /etc/coredns
                        ports:
                          - containerPort: 53
                            protocol: UDP
                          - containerPort: 53
                            protocol: TCP
                          - containerPort: 9153
                            protocol: TCP
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                            scheme: HTTP
                          initialDelaySeconds: 60
                          timeoutSeconds: 5
                          successThreshold: 1
                          failureThreshold: 5
                    dnsPolicy: Default
                    volumes:
                      - name: config-volume
                        configMap:
                          name: coredns
                          items:
                            - key: Corefile
                              path: Corefile
        - command: kubectl apply -f {{ tempfile.path }}
          changed_when: false
      always:
        - file:
            path: "{{ tempfile.path }}"
            state: absent
          changed_when: false

    - name: Generate and apply nfs k8s manifest
      block:
        - file:
            path: /vagrant/{{ config.k8s.services.nfs.hostBasedir }}
            state: directory
        - tempfile:
            state: file
          register: tempfile
          changed_when: false
        - copy:
            dest: "{{ tempfile.path }}"
            content: |
              ---
              kind: StorageClass
              apiVersion: storage.k8s.io/v1
              metadata:
                name: nfs-dynamic
                namespace: kube-system
              provisioner: example.com/nfs

              ---
              kind: Service
              apiVersion: v1
              metadata:
                name: nfs-provisioner
                namespace: kube-system
                labels:
                  app: nfs-provisioner
              spec:
                ports:
                  - name: nfs
                    port: 2049
                  - name: mountd
                    port: 20048
                  - name: rpcbind
                    port: 111
                  - name: rpcbind-udp
                    port: 111
                    protocol: UDP
                selector:
                  app: nfs-provisioner

              ---
              kind: Deployment
              apiVersion: apps/v1beta1
              metadata:
                name: nfs-provisioner
                namespace: kube-system
              spec:
                replicas: 1
                strategy:
                  type: Recreate
                template:
                  metadata:
                    labels:
                      app: nfs-provisioner
                  spec:
                    nodeSelector:
                      kubernetes.io/hostname: "{{ ansible_hostname }}"
                    containers:
                      - name: nfs-provisioner
                        image: quay.io/kubernetes_incubator/nfs-provisioner:v{{ config.k8s.services.nfs.version }}
                        ports:
                          - name: nfs
                            containerPort: 2049
                          - name: mountd
                            containerPort: 20048
                          - name: rpcbind
                            containerPort: 111
                          - name: rpcbind-udp
                            containerPort: 111
                            protocol: UDP
                        securityContext:
                          capabilities:
                            add:
                              - DAC_READ_SEARCH
                              - SYS_RESOURCE
                        args:
                          - "-provisioner=example.com/nfs"
                        env:
                          - name: POD_IP
                            valueFrom:
                              fieldRef:
                                fieldPath: status.podIP
                          - name: SERVICE_NAME
                            value: nfs-provisioner
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                        imagePullPolicy: "IfNotPresent"
                        volumeMounts:
                          - name: export-volume
                            mountPath: /export
                    volumes:
                      - name: export-volume
                        hostPath:
                          path: /vagrant/{{ config.k8s.services.nfs.hostBasedir }}
        - command: kubectl apply -f {{ tempfile.path }}
          changed_when: false
      always:
        - file:
            path: "{{ tempfile.path }}"
            state: absent
          changed_when: false
      when: config.k8s.services.nfs.storage_node == ansible_hostname

    - name: Generate and apply Traefik k8s manifest
      block:
        - tempfile:
            state: file
          register: tempfile
          changed_when: false
        - shell: kubectl create secret generic traefik-cert --from-file='{{ config.srvkube.guest }}/traefik.crt' --from-file='{{ config.srvkube.guest }}/traefik.key' --namespace=kube-system --dry-run -o yaml | kubectl apply -f -
          changed_when: false
        - copy:
            dest: "{{ tempfile.path }}"
            content: |
              ---
              kind: ClusterRole
              apiVersion: rbac.authorization.k8s.io/v1beta1
              metadata:
                name: traefik
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - pods
                    - services
                    - endpoints
                    - secrets
                  verbs:
                    - get
                    - list
                    - watch
                - apiGroups:
                    - extensions
                  resources:
                    - ingresses
                  verbs:
                    - get
                    - list
                    - watch

              ---
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: traefik
                namespace: kube-system

              ---
              kind: ClusterRoleBinding
              apiVersion: rbac.authorization.k8s.io/v1beta1
              metadata:
                name: traefik
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: traefik
              subjects:
                - kind: ServiceAccount
                  name: traefik
                  namespace: kube-system

              ---
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: traefik
                namespace: kube-system
              data:
                traefik.toml: |
                  defaultEntryPoints = ["http", "https"]
                  insecureSkipVerify = true
                  logLevel = "INFO"

                  [entryPoints]
                    [entryPoints.http]
                      address = ":80"
                      compress = true
                      [entryPoints.http.redirect]
                      entryPoint = "https"
                    [entryPoints.https]
                    address = ":443"
                    compress = true
                    [entryPoints.https.tls]
              {% if not config.acme.email %}
                    [[entryPoints.https.tls.certificates]]
                    CertFile = "/ssl/traefik.crt"
                    KeyFile = "/ssl/traefik.key"
              {% endif %}

                  [kubernetes]

                  [web]
                  address = ":8080"
                  readOnly = true

              {% if config.acme.email %}
                  # [etcd] # https://github.com/containous/traefik/issues/2712
                  #   endpoint = "{{ config.virtual.nodes[config.k8s.services.traefik.etcd_node].ip }}:4001"

                  [acme]
                    email = "{{ config.acme.email }}"
                    storage = "acme.json"
                    # storage = "traefik/acme/account" # https://github.com/containous/traefik/issues/2712
                    entryPoint = "https"
                    OnHostRule = true
                    caServer = "{{ config.acme.caServer }}"
                    [acme.httpChallenge]
                      entryPoint = "http"
              {% endif %}

              ---
              kind: Service
              apiVersion: v1
              metadata:
                name: traefik-ingress
                namespace: kube-system
              spec:
                selector:
                  app: traefik
                ports:
                  - name: http
                    protocol: TCP
                    port: 80
                    nodePort: {{ config.k8s.services.traefik.nodePort.http }}
                  - name: https
                    protocol: TCP
                    port: 443
                    nodePort: {{ config.k8s.services.traefik.nodePort.https }}
                type: NodePort

              ---
              kind: Service
              apiVersion: v1
              metadata:
                name: traefik-dashboard
                namespace: kube-system
              spec:
                selector:
                  app: traefik
                ports:
                  - name: admin
                    protocol: TCP
                    port: 8080

              ---
              apiVersion: extensions/v1beta1
              kind: Ingress
              metadata:
                name: traefik-dashboard-ingress
                namespace: kube-system
              spec:
                rules:
                  - http:
                      paths:
                        - path: /
                          backend:
                            serviceName: traefik-dashboard
                            servicePort: 8080

              ---
              kind: Deployment
              apiVersion: extensions/v1beta1
              metadata:
                name: traefik
                namespace: kube-system
                labels:
                  app: traefik
              spec:
                replicas: 1 # https://github.com/containous/traefik/issues/2712
                selector:
                  matchLabels:
                    app: traefik
                template:
                  metadata:
                    labels:
                      app: traefik
                      name: traefik
                  spec:
                    serviceAccountName: traefik
                    terminationGracePeriodSeconds: 60
                    volumes:
                      - name: config
                        configMap:
                          name: traefik
                      - name: ssl
                        secret:
                          secretName: traefik-cert
                    containers:
                      - image: traefik:{{ config.k8s.services.traefik.version }}
                        name: traefik
                        resources:
                          limits:
                            cpu: 200m
                            memory: 30Mi
                          requests:
                            cpu: 100m
                            memory: 20Mi
                        volumeMounts:
                          - name: "config"
                            mountPath: "/config"
                          - name: "ssl"
                            mountPath: "/ssl"
                        ports:
                          - containerPort: 80
                          - containerPort: 443
                          - containerPort: 8080
                        args:
                          - --web
                          - --kubernetes
                          - --configfile=/config/traefik.toml
        - command: kubectl apply -f {{ tempfile.path }}
          changed_when: false
      always:
        - file:
            path: "{{ tempfile.path }}"
            state: absent
          changed_when: false

    - name: Install socat
      apt:
        name: socat

    - stat:
        path: /usr/local/bin/helm
      register: sym

    - shell: /usr/local/bin/helm version -c
      register: helm_actual_version
      changed_when: false
      when: sym.stat.exists

    - name: Download and install helm binary
      block:
        - get_url:
            url: https://storage.googleapis.com/kubernetes-helm/helm-v{{ config.k8s.helm.version }}-linux-amd64.tar.gz
            dest: /tmp/helm.tar.gz
            validate_certs: no
        - unarchive:
            src: /tmp/helm.tar.gz
            dest: /tmp
        - copy:
            src: /tmp/linux-amd64/helm
            dest: /usr/local/bin/helm
            mode: 0755
        - file:
            path: /tmp/helm.tar.gz
            state: absent
      when: not sym.stat.exists or helm_actual_version.stdout is not search("v" + config.k8s.helm.version)

    - name: Generate and apply Helm ServiceAccount
      block:
        - tempfile:
            state: file
          register: tempfile
          changed_when: false
        - copy:
            dest: "{{ tempfile.path }}"
            content: |
              ---
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: tiller
                namespace: kube-system

              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: tiller
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: cluster-admin
              subjects:
                - kind: ServiceAccount
                  name: tiller
                  namespace: kube-system
        - command: kubectl apply -f {{ tempfile.path }}
          changed_when: false
      always:
        - file:
            path: "{{ tempfile.path }}"
            state: absent
          changed_when: false

    - name: Helm initialization
      shell: /usr/local/bin/helm init --service-account tiller
      changed_when: false
